// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dstash.proto

package keymaster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Success struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6a1428cb258f96, []int{0}
}

func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type StatusMessage struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusMessage) Reset()         { *m = StatusMessage{} }
func (m *StatusMessage) String() string { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()    {}
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6a1428cb258f96, []int{1}
}

func (m *StatusMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusMessage.Unmarshal(m, b)
}
func (m *StatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusMessage.Marshal(b, m, deterministic)
}
func (m *StatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusMessage.Merge(m, src)
}
func (m *StatusMessage) XXX_Size() int {
	return xxx_messageInfo_StatusMessage.Size(m)
}
func (m *StatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StatusMessage proto.InternalMessageInfo

func (m *StatusMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type KVPair struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KVPair) Reset()         { *m = KVPair{} }
func (m *KVPair) String() string { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()    {}
func (*KVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6a1428cb258f96, []int{2}
}

func (m *KVPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KVPair.Unmarshal(m, b)
}
func (m *KVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KVPair.Marshal(b, m, deterministic)
}
func (m *KVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVPair.Merge(m, src)
}
func (m *KVPair) XXX_Size() int {
	return xxx_messageInfo_KVPair.Size(m)
}
func (m *KVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_KVPair.DiscardUnknown(m)
}

var xxx_messageInfo_KVPair proto.InternalMessageInfo

func (m *KVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Success)(nil), "keymaster.Success")
	proto.RegisterType((*StatusMessage)(nil), "keymaster.StatusMessage")
	proto.RegisterType((*KVPair)(nil), "keymaster.KVPair")
}

func init() { proto.RegisterFile("dstash.proto", fileDescriptor_0c6a1428cb258f96) }

var fileDescriptor_0c6a1428cb258f96 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x4b, 0xe3, 0x40,
	0x14, 0x6d, 0x5a, 0x9a, 0x6d, 0x6f, 0xbb, 0xcb, 0xee, 0xb0, 0x94, 0x1a, 0x45, 0x24, 0x2f, 0x16,
	0x84, 0x69, 0xa8, 0x52, 0x10, 0x7c, 0x2a, 0x2a, 0x16, 0x15, 0x42, 0x83, 0x7d, 0x9f, 0xa6, 0x63,
	0x1a, 0xd2, 0x64, 0xc2, 0x7c, 0xa8, 0xf9, 0xcf, 0xfe, 0x08, 0xc9, 0x8c, 0x8a, 0xda, 0x56, 0xe9,
	0xdb, 0xcc, 0x3d, 0x73, 0xce, 0x9c, 0x73, 0xef, 0x85, 0xf6, 0x5c, 0x48, 0x22, 0x16, 0x38, 0xe7,
	0x4c, 0x32, 0xd4, 0x4c, 0x68, 0x91, 0x12, 0x21, 0x29, 0x77, 0x76, 0x23, 0xc6, 0xa2, 0x25, 0xed,
	0x6b, 0x60, 0xa6, 0xee, 0xfb, 0x34, 0xcd, 0x65, 0x61, 0xde, 0x39, 0xfb, 0x5f, 0xc1, 0x47, 0x4e,
	0xf2, 0x9c, 0x72, 0x61, 0x70, 0x77, 0x07, 0x7e, 0x05, 0x2a, 0x0c, 0xa9, 0x10, 0xe8, 0x0f, 0x54,
	0x59, 0xd2, 0xb5, 0x0e, 0xac, 0x5e, 0x63, 0x52, 0x65, 0x89, 0x7b, 0x08, 0xbf, 0x03, 0x49, 0xa4,
	0x12, 0xb7, 0x54, 0x08, 0x12, 0x51, 0xd4, 0x01, 0x5b, 0xe8, 0x82, 0x7e, 0xd4, 0x9c, 0xbc, 0xde,
	0x5c, 0x0f, 0xec, 0xeb, 0xa9, 0x4f, 0x62, 0x8e, 0xfe, 0x42, 0x2d, 0xa1, 0x85, 0x86, 0xdb, 0x93,
	0xf2, 0x88, 0xfe, 0x43, 0xfd, 0x81, 0x2c, 0x15, 0xed, 0x56, 0x75, 0xcd, 0x5c, 0x06, 0xcf, 0x35,
	0xb0, 0xcf, 0x83, 0x32, 0x0e, 0x1a, 0x40, 0xcd, 0x57, 0x12, 0xfd, 0xc3, 0xef, 0x81, 0xb0, 0x11,
	0x73, 0x3a, 0xd8, 0x78, 0xc7, 0x6f, 0xde, 0xf1, 0x45, 0x19, 0xcc, 0xad, 0xa0, 0x53, 0x68, 0x8c,
	0x88, 0x0c, 0x17, 0xdb, 0x12, 0x7b, 0x16, 0xf2, 0xc0, 0xbe, 0x61, 0x2c, 0x51, 0xf9, 0x3a, 0xe2,
	0x6a, 0x49, 0x7f, 0xd6, 0xd2, 0x9f, 0x6d, 0x47, 0xeb, 0x59, 0x9e, 0x85, 0x86, 0x50, 0x1f, 0x4b,
	0x9a, 0x0a, 0xb4, 0xc1, 0xd1, 0x5a, 0xa6, 0x67, 0xa1, 0x33, 0xb0, 0x4d, 0xe7, 0x37, 0x12, 0xbb,
	0x1f, 0x88, 0x9f, 0x86, 0xe4, 0x56, 0xd0, 0x25, 0x80, 0x36, 0x3c, 0xce, 0xe6, 0xf4, 0x09, 0xed,
	0xad, 0x28, 0x04, 0x92, 0xc7, 0x59, 0x34, 0x2d, 0x07, 0xf1, 0x6d, 0xab, 0xae, 0xc0, 0x0e, 0x28,
	0xe1, 0xe1, 0xe2, 0x07, 0x8d, 0x55, 0xf4, 0x6e, 0x9c, 0xc9, 0xe1, 0x89, 0x46, 0xcb, 0x3c, 0xa3,
	0x23, 0x70, 0x62, 0x86, 0x23, 0x9e, 0x87, 0x38, 0x52, 0x45, 0xca, 0x96, 0x71, 0x46, 0x78, 0x8c,
	0xcd, 0x42, 0x8f, 0x5a, 0x66, 0x13, 0xfc, 0x92, 0xed, 0x5b, 0x33, 0x5b, 0xcb, 0x1c, 0xbf, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x40, 0xd8, 0xb1, 0x62, 0xf0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DStashClient is the client API for DStash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DStashClient interface {
	Put(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchPut(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchPutClient, error)
	Lookup(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*KVPair, error)
	BatchLookup(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchLookupClient, error)
	Items(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DStash_ItemsClient, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusMessage, error)
	BatchIndex(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchIndexClient, error)
	Search(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (DStash_SearchClient, error)
}

type dStashClient struct {
	cc *grpc.ClientConn
}

func NewDStashClient(cc *grpc.ClientConn) DStashClient {
	return &dStashClient{cc}
}

func (c *dStashClient) Put(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/keymaster.DStash/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dStashClient) BatchPut(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DStash_serviceDesc.Streams[0], "/keymaster.DStash/BatchPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &dStashBatchPutClient{stream}
	return x, nil
}

type DStash_BatchPutClient interface {
	Send(*KVPair) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type dStashBatchPutClient struct {
	grpc.ClientStream
}

func (x *dStashBatchPutClient) Send(m *KVPair) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dStashBatchPutClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dStashClient) Lookup(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*KVPair, error) {
	out := new(KVPair)
	err := c.cc.Invoke(ctx, "/keymaster.DStash/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dStashClient) BatchLookup(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchLookupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DStash_serviceDesc.Streams[1], "/keymaster.DStash/BatchLookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &dStashBatchLookupClient{stream}
	return x, nil
}

type DStash_BatchLookupClient interface {
	Send(*KVPair) error
	Recv() (*KVPair, error)
	grpc.ClientStream
}

type dStashBatchLookupClient struct {
	grpc.ClientStream
}

func (x *dStashBatchLookupClient) Send(m *KVPair) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dStashBatchLookupClient) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dStashClient) Items(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DStash_ItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DStash_serviceDesc.Streams[2], "/keymaster.DStash/Items", opts...)
	if err != nil {
		return nil, err
	}
	x := &dStashItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DStash_ItemsClient interface {
	Recv() (*KVPair, error)
	grpc.ClientStream
}

type dStashItemsClient struct {
	grpc.ClientStream
}

func (x *dStashItemsClient) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dStashClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/keymaster.DStash/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dStashClient) BatchIndex(ctx context.Context, opts ...grpc.CallOption) (DStash_BatchIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DStash_serviceDesc.Streams[3], "/keymaster.DStash/BatchIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &dStashBatchIndexClient{stream}
	return x, nil
}

type DStash_BatchIndexClient interface {
	Send(*wrappers.StringValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type dStashBatchIndexClient struct {
	grpc.ClientStream
}

func (x *dStashBatchIndexClient) Send(m *wrappers.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dStashBatchIndexClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dStashClient) Search(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (DStash_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DStash_serviceDesc.Streams[4], "/keymaster.DStash/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &dStashSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DStash_SearchClient interface {
	Recv() (*wrappers.UInt64Value, error)
	grpc.ClientStream
}

type dStashSearchClient struct {
	grpc.ClientStream
}

func (x *dStashSearchClient) Recv() (*wrappers.UInt64Value, error) {
	m := new(wrappers.UInt64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DStashServer is the server API for DStash service.
type DStashServer interface {
	Put(context.Context, *KVPair) (*empty.Empty, error)
	BatchPut(DStash_BatchPutServer) error
	Lookup(context.Context, *KVPair) (*KVPair, error)
	BatchLookup(DStash_BatchLookupServer) error
	Items(*empty.Empty, DStash_ItemsServer) error
	Status(context.Context, *empty.Empty) (*StatusMessage, error)
	BatchIndex(DStash_BatchIndexServer) error
	Search(*wrappers.StringValue, DStash_SearchServer) error
}

// UnimplementedDStashServer can be embedded to have forward compatible implementations.
type UnimplementedDStashServer struct {
}

func (*UnimplementedDStashServer) Put(ctx context.Context, req *KVPair) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedDStashServer) BatchPut(srv DStash_BatchPutServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchPut not implemented")
}
func (*UnimplementedDStashServer) Lookup(ctx context.Context, req *KVPair) (*KVPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedDStashServer) BatchLookup(srv DStash_BatchLookupServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchLookup not implemented")
}
func (*UnimplementedDStashServer) Items(req *empty.Empty, srv DStash_ItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method Items not implemented")
}
func (*UnimplementedDStashServer) Status(ctx context.Context, req *empty.Empty) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedDStashServer) BatchIndex(srv DStash_BatchIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchIndex not implemented")
}
func (*UnimplementedDStashServer) Search(req *wrappers.StringValue, srv DStash_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterDStashServer(s *grpc.Server, srv DStashServer) {
	s.RegisterService(&_DStash_serviceDesc, srv)
}

func _DStash_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DStashServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keymaster.DStash/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DStashServer).Put(ctx, req.(*KVPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DStash_BatchPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DStashServer).BatchPut(&dStashBatchPutServer{stream})
}

type DStash_BatchPutServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*KVPair, error)
	grpc.ServerStream
}

type dStashBatchPutServer struct {
	grpc.ServerStream
}

func (x *dStashBatchPutServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dStashBatchPutServer) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DStash_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DStashServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keymaster.DStash/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DStashServer).Lookup(ctx, req.(*KVPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DStash_BatchLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DStashServer).BatchLookup(&dStashBatchLookupServer{stream})
}

type DStash_BatchLookupServer interface {
	Send(*KVPair) error
	Recv() (*KVPair, error)
	grpc.ServerStream
}

type dStashBatchLookupServer struct {
	grpc.ServerStream
}

func (x *dStashBatchLookupServer) Send(m *KVPair) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dStashBatchLookupServer) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DStash_Items_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DStashServer).Items(m, &dStashItemsServer{stream})
}

type DStash_ItemsServer interface {
	Send(*KVPair) error
	grpc.ServerStream
}

type dStashItemsServer struct {
	grpc.ServerStream
}

func (x *dStashItemsServer) Send(m *KVPair) error {
	return x.ServerStream.SendMsg(m)
}

func _DStash_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DStashServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keymaster.DStash/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DStashServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DStash_BatchIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DStashServer).BatchIndex(&dStashBatchIndexServer{stream})
}

type DStash_BatchIndexServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.StringValue, error)
	grpc.ServerStream
}

type dStashBatchIndexServer struct {
	grpc.ServerStream
}

func (x *dStashBatchIndexServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dStashBatchIndexServer) Recv() (*wrappers.StringValue, error) {
	m := new(wrappers.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DStash_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DStashServer).Search(m, &dStashSearchServer{stream})
}

type DStash_SearchServer interface {
	Send(*wrappers.UInt64Value) error
	grpc.ServerStream
}

type dStashSearchServer struct {
	grpc.ServerStream
}

func (x *dStashSearchServer) Send(m *wrappers.UInt64Value) error {
	return x.ServerStream.SendMsg(m)
}

var _DStash_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keymaster.DStash",
	HandlerType: (*DStashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DStash_Put_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _DStash_Lookup_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DStash_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchPut",
			Handler:       _DStash_BatchPut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchLookup",
			Handler:       _DStash_BatchLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Items",
			Handler:       _DStash_Items_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchIndex",
			Handler:       _DStash_BatchIndex_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _DStash_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dstash.proto",
}
